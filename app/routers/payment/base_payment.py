import datetime
import json
from datetime import timedelta

from aiogram.fsm.context import FSMContext
from aiogram.types import LabeledPrice
from aiogram import types, Router, F, html

from app.database.requests import db
from app.templates.messages_templates import TEXT_FOR_PROFILE
from config import PAYMENT_TOKEN

router = Router()


async def invoice(callback, price: float) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–æ–≤. –í —Å–ª—É—á–∞–µ —É—Å–ø–µ—Ö–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è.
    :param callback: Callback –∑–∞–ø—Ä–æ—Å
    :param price: –°—É–º–º–∞
    """

    await callback.bot.send_invoice(
        chat_id=callback.message.chat.id,
        title='–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏',
        description='–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
        provider_token=PAYMENT_TOKEN,
        currency='rub',
        # is_flexible=False,
        prices=[
            LabeledPrice(label=f'–ì–µ–Ω–µ—Ä–∞—Ü–∏–∏', amount=100 * int(price)),
        ],
        payload='invoice-payload',
        provider_data=json.dumps(
            {'receipt':
                {'items': [
                    {'description': '–ê–∫—Ç–∏–≤–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–π',
                     'quantity': '1',
                     'amount': {
                         'value': str(price),
                         'currency': 'RUB',
                     },
                     'vat_code': 1,
                     }
                ], 'email': 'mail@mail.ru',
                },

            }),
        need_email=False,
        send_email_to_provider=False,
    )


@router.pre_checkout_query(lambda query: True)
async def pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery) -> None:
    """
    –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ –∏ –¥–æ—Å—Ç–∞–≤–∫–µ,
     Bot API –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –ø–æ–ª–µ–º pre_checkout_query
    :param pre_checkout_query: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –∑–∞–ø—Ä–æ—Å–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
    """
    await pre_checkout_query.bot.answer_pre_checkout_query(pre_checkout_query.id,
                                                           ok=True)  # –£–∫–∞–∂–∏—Ç–µ True, –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ (—Ç–æ–≤–∞—Ä –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏ –∏ —Ç.–ø.)
    # –∏ –±–æ—Ç –≥–æ—Ç–æ–≤ –ø—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.
    # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ False, –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–∫–∏–µ-–ª–∏–±–æ –ø—Ä–æ–±–ª–µ–º—ã.


@router.message(F.successful_payment)
async def successful_payment(message: types.Message,
                             state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ.
    –ü–æ–ª—É—á–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–ª–∞—Ç–µ–∂–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    """
    user_id = message.from_user.id
    purchase_amount = message.successful_payment.total_amount // 100
    user_data_cache = await state.get_data()
    user_data = await db.get_user_data(message.from_user.id)

    subscription_end_date_actual = user_data['subscription_end_date']
    if subscription_end_date_actual:
        subscription_end_date = subscription_end_date_actual + timedelta(days=user_data_cache['days'])
    else:
        subscription_end_date = datetime.datetime.now() + timedelta(days=user_data_cache['days'])

    await db.subscribe_user(user_id, subscription_end_date)
    await db.add_payment(user_id, purchase_amount, subscription_end_date)
    await message.bot.send_message(message.chat.id,
                                   f"‚úÖ {html.bold('–û—Ñ–æ—Ä–º–ª–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –¥–æ:')}\n"
                                   f"{html.pre(subscription_end_date.strftime('%d.%m.%Y %H:%M'))}\n"
                                   f"/start - –Ω–∞—á–∞—Ç—å\n"
                                   f"–£—Å–ø–µ—à–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ üì∏üéâ!")
