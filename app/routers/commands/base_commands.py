import os.path

from aiogram import Router, html
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, FSInputFile
from aiogram.utils.media_group import MediaGroupBuilder

from app import keyboards as kb
from app.database.requests import db
from app.filters.user_filters import Admins
from app.image_generate import get_api_subscription_tokens
from app.templates.messages_templates import MESSAGE_HELP, TEXT_FOR_PROFILE, MESSAGE_START_FOR_NEW_USERS, MESSAGE_START, \
    TEXT_FOR_ADMINS_PROFILE
from config import MEDIA_DIR

router = Router(name=__name__)

VIDEO = FSInputFile(f'{MEDIA_DIR}/promo.mp4')


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/start', –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –≤ —Å–ª—É—á–∞–µ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = message.from_user.id

    user_data = await db.get_user_data(user_id=user_id)

    if not user_data:
        name = message.from_user.first_name
        username = message.from_user.username
        await db.add_user(user_id=user_id, name=name, username=username)
        mess = '–í–∞–º –¥–æ—Å—Ç—É–ø–Ω–æ 3 –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n' \
               '/buy - –ø–æ–∫—É–ø–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π'
        await message.bot.send_video(chat_id=message.chat.id,
                                         caption=MESSAGE_START_FOR_NEW_USERS.format(name=html.bold(message.from_user.full_name)) + mess,
                                         allow_sending_without_reply=True,
                                         video=VIDEO,
                                         reply_markup=await kb.start_menu(),
                                     )
        # media_group = MediaGroupBuilder(
        #     caption=MESSAGE_START_FOR_NEW_USERS.format(name=html.bold(message.from_user.full_name)) + mess)
        # media_group.add(type='photo', media=FSInputFile(f'{MEDIA_DIR}/original.jpg'))
        # media_group.add(type='photo', media=FSInputFile(f'{MEDIA_DIR}/result.jpg'))
        # await message.bot.send_media_group(user_id, media=media_group.build())
    else:
        await message.bot.send_video(chat_id=message.chat.id,
                                         caption=MESSAGE_START,
                                         allow_sending_without_reply=True,
                                         video=VIDEO,
                                         reply_markup=await kb.start_menu(),
                                     )
    await state.clear()


@router.message(Command('help'))
async def command_help_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/help', –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()
    await message.answer(text=MESSAGE_HELP, reply_markup=await kb.start_menu())


@router.message(Command('buy'))
async def command_buy_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/buy', –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—ë–∂–Ω—ã–π –ø–ª–∞–Ω, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:\n\n'
                         f'üíõ1 –Ω–µ–¥–µ–ª—è - 299 —Ä—É–±.\n'
                         f'ü©µ2 –Ω–µ–¥–µ–ª–∏ - 600 —Ä—É–±.\n'
                         f'‚ù§Ô∏è–ú–µ—Å—è—Ü - 1100 —Ä—É–±.\n',
                         reply_markup=await kb.generations())



@router.message(Command('get_user_list'), Admins())
async def command_get_user_list_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    users_sequence = await db.get_user_list()
    users_list = []
    for i, user in enumerate(users_sequence, start=1):
        users_list.append(f'{i}. {user.name} - @{user.username}')

    await message.answer('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n'
                         '‚Ññ  |  –ò–º—è  |  username   \n\n' + '\n'.join(users_list), reply_markup=await kb.cancel())


@router.message(Command('account'), Admins())
async def command_account_handler(message: Message, state: FSMContext) -> None:
    await state.clear()
    tokens = await get_api_subscription_tokens()
    await message.answer(TEXT_FOR_ADMINS_PROFILE.format(name=message.from_user.first_name,
                                                        user_id=message.from_user.id,
                                                        tokens=tokens), reply_markup=await kb.personal_area())


@router.message(Command('account'))
async def command_account_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/account'
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()

    user_id = message.from_user.id
    user_data = await db.get_user_data(user_id)
    if user_data:
        if user_data['subscription_end_date']:
            subscription_end_date = user_data['subscription_end_date'].strftime("%d.%m.%Y %H:%M")
        else:
            subscription_end_date = '–ù–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞'
        await message.answer(TEXT_FOR_PROFILE.format(name=message.from_user.first_name,
                                                     user_id=user_id,
                                                     subscription_end_date=subscription_end_date,
                                                     used_generations=user_data['used_generations']))
    else:
        await message.answer(f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞')
