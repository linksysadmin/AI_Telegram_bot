from aiogram import Router, html
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext
from aiogram.types import Message

from app import keyboards as kb
from app.database.requests import db
from app.templates.messages_templates import MESSAGE_HELP

router = Router(name=__name__)


@router.message(CommandStart())
async def command_start_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/start', –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    –î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î, –≤ —Å–ª—É—á–∞–µ –µ–≥–æ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    user_id = message.from_user.id
    check_user = await db.get_user_data(user_id=user_id)
    if not check_user:
        await db.add_user(user_id=user_id)
    await state.clear()
    await message.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!, {html.bold(message.from_user.full_name)}!\n"
                         f"–í–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è üì∏\n\n"
                         + MESSAGE_HELP,
                         reply_markup=await kb.start_menu())


@router.message(Command('help'))
async def command_test_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/help', –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ç–∏—Ä—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()
    await message.answer(text=MESSAGE_HELP, reply_markup=await kb.start_menu())


@router.message(Command('buy'))
async def command_buy_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/buy', –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()
    await message.answer(f'–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏:\n\n'
                         f'üíõ1 –Ω–µ–¥–µ–ª—è - 199 —Ä—É–±.\n'
                         f'ü©µ2 –Ω–µ–¥–µ–ª–∏ - 400 —Ä—É–±.\n'
                         f'‚ù§Ô∏è–ú–µ—Å—è—Ü - 549 —Ä—É–±.\n',
                         reply_markup=await kb.generations())


@router.message(Command('account'))
async def command_buy_handler(message: Message, state: FSMContext) -> None:
    """
    –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã '/profile'
    :param message: –°–æ–æ–±—â–µ–Ω–∏–µ-entity
    :param state: –°–æ—Å—Ç–æ—è–Ω–∏–µ
    """
    await state.clear()

    user_id = message.from_user.id
    user_data = await db.get_user_data(user_id)
    if user_data:
        await message.answer(f'–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç:\n\n'
                             f'–ò–º—è: {message.from_user.first_name}\n'
                             f'ID: {user_id}\n'
                             f'–î–æ—Å—Ç—É–ø–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_data["available_generations"]}\n'
                             f'–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: {user_data["used_generations"]}\n\n'
                             f'–ö—É–ø–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: /buy\n'
                             f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'
                             )
    else:
        await message.answer(f'–ù–∞–∂–º–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞')
