import logging

from aiogram import Router, F
from aiogram.client.session import aiohttp
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, BufferedInputFile
from aiogram.utils.chat_action import ChatActionSender

from app import keyboards as kb
from app.database.requests import db
from app.music_generate import generate
from app.states import Generation, GenerationMusic

logger = logging.getLogger(__name__)
router = Router(name=__name__)


@router.message(Generation.newsletter)
async def get_prompt(message: Message, state: FSMContext) -> None:
    await state.update_data(message_id=message.message_id)
    await message.answer(text=f'–£–≤–µ—Ä–µ–Ω—ã?\n\n', reply_markup=await kb.send_newsletter())


@router.message(F.text, GenerationMusic.lyric)
async def get_lyric(message: Message, state: FSMContext):
    """ User adds his lyrics """
    await state.set_data({'lyric': message.text})
    await state.set_state(GenerationMusic.tag)
    await message.reply(
        text="üéµ–¢–µ–ø–µ—Ä—å –¥–æ–±–∞–≤—å—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è –≤ –∑–≤—É—á–∞–Ω–∏–∏üéµ\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: <b>—Ç—è–∂–µ–ª—ã–π —Ä–æ–∫, –º—É–∂—Å–∫–æ–π –≥–æ–ª–æ—Å</b>" \
             "<blockquote>–î–ª—è –ª—É—á—à–µ–≥–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –≤–∞—à–∏–º –æ–∂–∏–¥–∞–Ω–∏—è–º –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –∂–∞–Ω—Ä –ø–µ—Å–Ω–∏, –µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –∫–∞–∫–∏–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∏–≥—Ä–∞—é—Ç</blockquote>" \
             "<blockquote>‚ùóÔ∏è–°—Ç–∞—Ä–∞–π—Ç–µ—Å—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –∑–∞–ø—Ä–æ—Å–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π –∏ –∏—Ö –ø–µ—Å–Ω–∏</blockquote>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cancel')
        ]]))


@router.message(F.text, GenerationMusic.tag)
async def get_tag_n_generate(message: Message, state: FSMContext):
    """
    User adds his prompts and waits until he earns audio.
    """

    await message.answer_dice('üé≤')
    data = await state.get_data()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} —Å–æ–∑–¥–∞–ª –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –º—É–∑—ã–∫–∏")

    await state.clear()
    try:
        await message.answer(
            text=
            '–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω, –ø–µ—Å–Ω—è –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.'
        )

        async with ChatActionSender.record_voice(bot=message.bot,
                                                 chat_id=message.chat.id):
            link = await generate(data['lyric'], message.text)
            async with aiohttp.ClientSession() as session:
                async with session.get(link[0]) as response:
                    result_bytes = await response.read()
                    await message.reply_document(document=BufferedInputFile(
                        file=result_bytes, filename='music.mp3'))
                await message.answer(
                    text=
                    "<b>–°–µ–π—á–∞—Å –æ—Ç–ø—Ä–∞–≤–∏–º –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –ø–æ–∫–∞ –∂–¥–µ—Ç–µ, –º–æ–∂–µ—Ç–µ –ø–æ—Å–ª—É—à–∞—Ç—å –ø–µ—Ä–≤—ã–πüéß</b>"
                )
                async with session.get(link[1]) as response:
                    result_bytes = await response.read()
                    await message.reply_document(document=BufferedInputFile(
                        file=result_bytes, filename='music.mp3'))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")
        await message.answer(
            text=f'–í–∞—à —Ç—Ä–µ–∫ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –∫—Ä—É—Ç ü§ü, —á—Ç–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ê–≤—Ä–æ—Ä–∞ –≤–ø–∞–ª–∞ –≤ –∞–Ω–∞–±–∏–æ–∑ üòî\n'
                 f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å–Ω–æ–≤–∞ üòú', reply_markup=await kb.cancel())
    try:
        await db.add_used_and_daily_generation(message.from_user.id)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")
